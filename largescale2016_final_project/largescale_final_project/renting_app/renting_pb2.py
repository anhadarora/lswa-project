# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: renting.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='renting.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\rrenting.proto\";\n\nAddRequest\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x0c\n\x04item\x18\x02 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x03 \x01(\t\"\x1d\n\x08\x41\x64\x64Reply\x12\x11\n\tcompleted\x18\x01 \x01(\t\"\x1e\n\rSearchRequest\x12\r\n\x05query\x18\x01 \x01(\t\"\x1d\n\x0bSearchReply\x12\x0e\n\x06hit_id\x18\x01 \x03(\x05\"\x1b\n\rDeleteRequest\x12\n\n\x02id\x18\x01 \x01(\x05\" \n\x0b\x44\x65leteReply\x12\x11\n\tcompleted\x18\x01 \x01(\t2\x83\x01\n\x0cWhooshSearch\x12\x1f\n\x03\x41\x64\x64\x12\x0b.AddRequest\x1a\t.AddReply\"\x00\x12(\n\x06Search\x12\x0e.SearchRequest\x1a\x0c.SearchReply\"\x00\x12(\n\x06\x44\x65lete\x12\x0e.DeleteRequest\x1a\x0c.DeleteReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_ADDREQUEST = _descriptor.Descriptor(
  name='AddRequest',
  full_name='AddRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='AddRequest.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='item', full_name='AddRequest.item', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='AddRequest.description', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=17,
  serialized_end=76,
)


_ADDREPLY = _descriptor.Descriptor(
  name='AddReply',
  full_name='AddReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='completed', full_name='AddReply.completed', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=78,
  serialized_end=107,
)


_SEARCHREQUEST = _descriptor.Descriptor(
  name='SearchRequest',
  full_name='SearchRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='query', full_name='SearchRequest.query', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=109,
  serialized_end=139,
)


_SEARCHREPLY = _descriptor.Descriptor(
  name='SearchReply',
  full_name='SearchReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hit_id', full_name='SearchReply.hit_id', index=0,
      number=1, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=141,
  serialized_end=170,
)


_DELETEREQUEST = _descriptor.Descriptor(
  name='DeleteRequest',
  full_name='DeleteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='DeleteRequest.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=172,
  serialized_end=199,
)


_DELETEREPLY = _descriptor.Descriptor(
  name='DeleteReply',
  full_name='DeleteReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='completed', full_name='DeleteReply.completed', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=201,
  serialized_end=233,
)

DESCRIPTOR.message_types_by_name['AddRequest'] = _ADDREQUEST
DESCRIPTOR.message_types_by_name['AddReply'] = _ADDREPLY
DESCRIPTOR.message_types_by_name['SearchRequest'] = _SEARCHREQUEST
DESCRIPTOR.message_types_by_name['SearchReply'] = _SEARCHREPLY
DESCRIPTOR.message_types_by_name['DeleteRequest'] = _DELETEREQUEST
DESCRIPTOR.message_types_by_name['DeleteReply'] = _DELETEREPLY

AddRequest = _reflection.GeneratedProtocolMessageType('AddRequest', (_message.Message,), dict(
  DESCRIPTOR = _ADDREQUEST,
  __module__ = 'renting_pb2'
  # @@protoc_insertion_point(class_scope:AddRequest)
  ))
_sym_db.RegisterMessage(AddRequest)

AddReply = _reflection.GeneratedProtocolMessageType('AddReply', (_message.Message,), dict(
  DESCRIPTOR = _ADDREPLY,
  __module__ = 'renting_pb2'
  # @@protoc_insertion_point(class_scope:AddReply)
  ))
_sym_db.RegisterMessage(AddReply)

SearchRequest = _reflection.GeneratedProtocolMessageType('SearchRequest', (_message.Message,), dict(
  DESCRIPTOR = _SEARCHREQUEST,
  __module__ = 'renting_pb2'
  # @@protoc_insertion_point(class_scope:SearchRequest)
  ))
_sym_db.RegisterMessage(SearchRequest)

SearchReply = _reflection.GeneratedProtocolMessageType('SearchReply', (_message.Message,), dict(
  DESCRIPTOR = _SEARCHREPLY,
  __module__ = 'renting_pb2'
  # @@protoc_insertion_point(class_scope:SearchReply)
  ))
_sym_db.RegisterMessage(SearchReply)

DeleteRequest = _reflection.GeneratedProtocolMessageType('DeleteRequest', (_message.Message,), dict(
  DESCRIPTOR = _DELETEREQUEST,
  __module__ = 'renting_pb2'
  # @@protoc_insertion_point(class_scope:DeleteRequest)
  ))
_sym_db.RegisterMessage(DeleteRequest)

DeleteReply = _reflection.GeneratedProtocolMessageType('DeleteReply', (_message.Message,), dict(
  DESCRIPTOR = _DELETEREPLY,
  __module__ = 'renting_pb2'
  # @@protoc_insertion_point(class_scope:DeleteReply)
  ))
_sym_db.RegisterMessage(DeleteReply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class WhooshSearchStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Add = channel.unary_unary(
        '/WhooshSearch/Add',
        request_serializer=AddRequest.SerializeToString,
        response_deserializer=AddReply.FromString,
        )
    self.Search = channel.unary_unary(
        '/WhooshSearch/Search',
        request_serializer=SearchRequest.SerializeToString,
        response_deserializer=SearchReply.FromString,
        )
    self.Delete = channel.unary_unary(
        '/WhooshSearch/Delete',
        request_serializer=DeleteRequest.SerializeToString,
        response_deserializer=DeleteReply.FromString,
        )


class WhooshSearchServicer(object):

  def Add(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Search(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WhooshSearchServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Add': grpc.unary_unary_rpc_method_handler(
          servicer.Add,
          request_deserializer=AddRequest.FromString,
          response_serializer=AddReply.SerializeToString,
      ),
      'Search': grpc.unary_unary_rpc_method_handler(
          servicer.Search,
          request_deserializer=SearchRequest.FromString,
          response_serializer=SearchReply.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=DeleteRequest.FromString,
          response_serializer=DeleteReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'WhooshSearch', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaWhooshSearchServicer(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def Add(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Search(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Delete(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaWhooshSearchStub(object):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This class was generated
  only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
  def Add(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Add.future = None
  def Search(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Search.future = None
  def Delete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Delete.future = None


def beta_create_WhooshSearch_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_deserializers = {
    ('WhooshSearch', 'Add'): AddRequest.FromString,
    ('WhooshSearch', 'Delete'): DeleteRequest.FromString,
    ('WhooshSearch', 'Search'): SearchRequest.FromString,
  }
  response_serializers = {
    ('WhooshSearch', 'Add'): AddReply.SerializeToString,
    ('WhooshSearch', 'Delete'): DeleteReply.SerializeToString,
    ('WhooshSearch', 'Search'): SearchReply.SerializeToString,
  }
  method_implementations = {
    ('WhooshSearch', 'Add'): face_utilities.unary_unary_inline(servicer.Add),
    ('WhooshSearch', 'Delete'): face_utilities.unary_unary_inline(servicer.Delete),
    ('WhooshSearch', 'Search'): face_utilities.unary_unary_inline(servicer.Search),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_WhooshSearch_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  """The Beta API is deprecated for 0.15.0 and later.

  It is recommended to use the GA API (classes and functions in this
  file not marked beta) for all further purposes. This function was
  generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
  request_serializers = {
    ('WhooshSearch', 'Add'): AddRequest.SerializeToString,
    ('WhooshSearch', 'Delete'): DeleteRequest.SerializeToString,
    ('WhooshSearch', 'Search'): SearchRequest.SerializeToString,
  }
  response_deserializers = {
    ('WhooshSearch', 'Add'): AddReply.FromString,
    ('WhooshSearch', 'Delete'): DeleteReply.FromString,
    ('WhooshSearch', 'Search'): SearchReply.FromString,
  }
  cardinalities = {
    'Add': cardinality.Cardinality.UNARY_UNARY,
    'Delete': cardinality.Cardinality.UNARY_UNARY,
    'Search': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'WhooshSearch', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
